You are an expert in Typescript, React, Node.js, React router Router, Zustand, Tailwind, and Stylus.

Code Style and Structure

- Write concise, technical Typescript code following Standard.js rules.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content.

Standard.js Rules

- Use 2 space indentation.
- Use single quotes for strings except to avoid escaping.
- No semicolons (unless required to disambiguate statements).
- No unused variables.
- Add a space after keywords.
- Add a space before a function declaration's parentheses.
- Always use === instead of ==.
- Infix operators must be spaced.
- Commas should have a space after them.
- Keep else statements on the same line as their curly braces.
- For multi-line if statements, use curly braces.
- Always handle the err function parameter.
- Use camelcase for variables and functions.
- Use PascalCase for constructors and React components.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

React Best Practices

- Use functional components with prop-types for type checking.
- Use the "function" keyword for component definitions.
- Implement hooks correctly (useState, useEffect, useContext, useReducer, useMemo, useCallback).
- Follow the Rules of Hooks (only call hooks at the top level, only call hooks from React functions).
- Create custom hooks to extract reusable component logic.
- Use React.memo() for component memoization when appropriate.
- Implement useCallback for memoizing functions passed as props.
- Use useMemo for expensive computations.
- Avoid inline function definitions in render to prevent unnecessary re-renders.
- Prefer composition over inheritance.
- Use children prop and render props pattern for flexible, reusable components.
- Implement React.lazy() and Suspense for code splitting.
- Use refs sparingly and mainly for DOM access.
- Prefer controlled components over uncontrolled components.
- Implement error boundaries to catch and handle errors gracefully.
- Use cleanup functions in useEffect to prevent memory leaks.
- Use short-circuit evaluation and ternary operators for conditional rendering.

State Management

- Use Zustand for global state management.
- Lift state up when needed to share state between components.
- Use context for intermediate state sharing when prop drilling becomes cumbersome.

UI and Styling

- Use Shadcn UI and Radix UI for component foundations.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
- Use Stylus as CSS Modules for component-specific styles:
  - Create a .module.styl file for each component that needs custom styling.
  - Use camelCase for class names in Stylus files.
  - Leverage Stylus features like nesting, variables, and mixins for efficient styling.
- Implement a consistent naming convention for CSS classes (e.g., BEM) within Stylus modules.
- Use Tailwind for utility classes and rapid prototyping.
- Combine Tailwind utility classes with Stylus modules for a hybrid approach:
  - Use Tailwind for common utilities and layout.
  - Use Stylus modules for complex, component-specific styles.
  - Never use the @apply directive

File Structure for Styling

- Place Stylus module files next to their corresponding component files.
- Example structure:
  components/
  Button/
  Button.js
  Button.module.styl
  Card/
  Card.js
  Card.module.styl

Stylus Best Practices

- Use variables for colors, fonts, and other repeated values.
- Create mixins for commonly used style patterns.
- Utilize Stylus' parent selector (&) for nesting and pseudo-classes.
- Keep specificity low by avoiding deep nesting.

Integration with React

- Import Stylus modules in React components:
  import styles from './ComponentName.module.styl'
- Apply classes using the styles object:
  <div className={styles.containerClass}>

Performance Optimization

- Minimize 'use client', 'useEffect', and 'useState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement route-based code splitting in Next.js.
- Minimize the use of global styles; prefer modular, scoped styles.
- Use PurgeCSS with Tailwind to remove unused styles in production.

Forms and Validation

- Use controlled components for form inputs.
- Implement form validation (client-side and server-side).
- Consider using libraries like react-hook-form for complex forms.
- Use Zod or Joi for schema validation.

Error Handling and Validation

- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Model expected errors as return values in Server Actions.

Accessibility (a11y)

- Use semantic HTML elements.
- Implement proper ARIA attributes.
- Ensure keyboard navigation support.

Testing

- Write unit tests for components using Jest and React Testing Library.
- Implement integration tests for critical user flows.
- Use snapshot testing judiciously.

Security

- Sanitize user inputs to prevent XSS attacks.
- Use dangerouslySetInnerHTML sparingly and only with sanitized content.

Internationalization (i18n)

- Use libraries like react-intl or next-i18next for internationalization.

  You are an expert in UI and UX design principles for software development.

  Visual Design

  - Establish a clear visual hierarchy to guide user attention.
  - Choose a cohesive color palette that reflects the brand (ask the user for guidelines).
  - Use typography effectively for readability and emphasis.
  - Maintain sufficient contrast for legibility (WCAG 2.1 AA standard).
  - Design with a consistent style across the application.

  Interaction Design

  - Create intuitive navigation patterns.
  - Use familiar UI components to reduce cognitive load.
  - Provide clear calls-to-action to guide user behavior.
  - Implement responsive design for cross-device compatibility.
  - Use animations judiciously to enhance user experience.

  Accessibility

  - Follow WCAG guidelines for web accessibility.
  - Use semantic HTML to enhance screen reader compatibility.
  - Provide alternative text for images and non-text content.
  - Ensure keyboard navigability for all interactive elements.
  - Test with various assistive technologies.

  Performance Optimization

  - Optimize images and assets to minimize load times.
  - Implement lazy loading for non-critical resources.
  - Use code splitting to improve initial load performance.
  - Monitor and optimize Core Web Vitals (LCP, FID, CLS).

  User Feedback

  - Incorporate clear feedback mechanisms for user actions.
  - Use loading indicators for asynchronous operations.
  - Provide clear error messages and recovery options.
  - Implement analytics to track user behavior and pain points.

  Information Architecture

  - Organize content logically to facilitate easy access.
  - Use clear labeling and categorization for navigation.
  - Implement effective search functionality.
  - Create a sitemap to visualize overall structure.

  Mobile-First Design

  - Design for mobile devices first, then scale up.
  - Use touch-friendly interface elements.
  - Implement gestures for common actions (swipe, pinch-to-zoom).
  - Consider thumb zones for important interactive elements.

  Consistency

  - Develop and adhere to a design system.
  - Use consistent terminology throughout the interface.
  - Maintain consistent positioning of recurring elements.
  - Ensure visual consistency across different sections.

  Testing and Iteration

  - Conduct A/B testing for critical design decisions.
  - Use heatmaps and session recordings to analyze user behavior.
  - Regularly gather and incorporate user feedback.
  - Continuously iterate on designs based on data and feedback.

  Documentation

  - Maintain a comprehensive style guide.
  - Document design patterns and component usage.
  - Create user flow diagrams for complex interactions.
  - Keep design assets organized and accessible to the team.

  Fluid Layouts

  - Use relative units (%, em, rem) instead of fixed pixels.
  - Implement CSS Grid and Flexbox for flexible layouts.
  - Design with a mobile-first approach, then scale up.

  Media Queries

  - Use breakpoints to adjust layouts for different screen sizes.
  - Focus on content needs rather than specific devices.
  - Test designs across a range of devices and orientations.

  Images and Media

  - Use responsive images with srcset and sizes attributes.
  - Implement lazy loading for images and videos.
  - Use CSS to make embedded media (like iframes) responsive.

  Typography

  - Use relative units (em, rem) for font sizes.
  - Adjust line heights and letter spacing for readability on small screens.
  - Implement a modular scale for consistent typography across breakpoints.

  Touch Targets

  - Ensure interactive elements are large enough for touch (min 44x44 pixels).
  - Provide adequate spacing between touch targets.
  - Consider hover states for desktop and focus states for touch/keyboard.

  Performance

  - Optimize assets for faster loading on mobile networks.
  - Use CSS animations instead of JavaScript when possible.
  - Implement critical CSS for above-the-fold content.

  Content Prioritization

  - Prioritize content display for mobile views.
  - Use progressive disclosure to reveal content as needed.
  - Implement off-canvas patterns for secondary content on small screens.

  Navigation

  - Design mobile-friendly navigation patterns (e.g., hamburger menu).
  - Ensure navigation is accessible via keyboard and screen readers.
  - Consider using a sticky header for easy navigation access.

  Forms

  - Design form layouts that adapt to different screen sizes.
  - Use appropriate input types for better mobile experiences.
  - Implement inline validation and clear error messaging.

  Testing

  - Use browser developer tools to test responsiveness.
  - Test on actual devices, not just emulators.
  - Conduct usability testing across different device types.

  Stay updated with the latest responsive design techniques and browser capabilities.
  Refer to industry-standard guidelines and stay updated with latest UI/UX trends and best practices.

always use yarn for install pacakges

folder structure must be like this:

folderName/
fileName.tsx
interface/index.ts
index.ts - for import componenet

always use react phosphor icons for documentation https://phosphoricons.com/
